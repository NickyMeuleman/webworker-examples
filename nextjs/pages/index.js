import Head from "next/head";
import { useRef, useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { fibonacci } from "../src/utils.js";

export default function Home() {
  const [inputNum, setInputNum] = useState(42);
  const [fibResult, setFibResult] = useState("None yet");
  const [randomNum, setRandomNum] = useState("None yet");
  const workerRef = useRef();

  useEffect(() => {
    workerRef.current = new Worker(
      new URL("../src/worker.js", import.meta.url),
      {
        type: "module",
      }
    );
    workerRef.current.addEventListener("message", (msg) => {
      const result = msg.data;
      setFibResult(result);
    });

    return () => workerRef.current.terminate();
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h2>Calculate the N-th Fibonnaci number</h2>
        <label htmlFor="fib-input"> N-th </label>
        <input
          id="fib-input"
          type="number"
          value={inputNum}
          onChange={(event) => setInputNum(event.target.value)}
          min="0"
        />
        <button
          id="calculate-main"
          onClick={() => {
            // The next line never executes because this entire function is one task
            // only the last value for the textcontent of the place fibResult goes is considered
            // explanation: https://www.youtube.com/watch?v=cCOL7MC4Pl0
            setFibResult("Calculating");

            const num = Number(inputNum);
            const result = fibonacci(num - 1);
            setFibResult(result);
          }}
        >
          Calculate on the main thread
        </button>
        <button
          id="calculate-worker"
          onClick={() => {
            const num = Number(inputNum);
            setFibResult("Calculating");
            workerRef.current.postMessage(num - 1);
          }}
        >
          Calculate in a web worker
        </button>
        <p>
          Answer:
          <output id="fib-output">{fibResult}</output>
        </p>
        <h2>Generate a number while calculating</h2>
        <button id="random-btn" onClick={() => setRandomNum(Math.random())}>
          Generate random number
        </button>
        <output id="random-output">{randomNum}</output>
        <div className={styles["lorem-container"]}>
          <h2>Select text while calculating</h2>
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam
            veritatis officia odio similique culpa laboriosam ipsa quia nesciunt
            aspernatur quisquam quam vitae voluptas omnis, blanditiis
            necessitatibus cupiditate libero dicta, excepturi deleniti mollitia
            consectetur labore iusto dolor vero. Consectetur, repellat vitae,
            pariatur doloribus asperiores ipsum harum quo ab esse minima
            accusamus.
          </p>
          <p>
            Voluptatum vel, qui suscipit atque delectus ipsa sit. Eveniet non
            minima asperiores fugit veniam repellat quo? Dignissimos modi
            aperiam suscipit enim commodi. Exercitationem, officia consectetur
            corrupti facilis neque quos incidunt nemo illo earum dignissimos sed
            vel odio assumenda, impedit ullam nulla repellendus eos blanditiis
            quisquam placeat dolorem! Tempore, ex cum.
          </p>
          <p>
            Amet tenetur, mollitia dolor quo quisquam perspiciatis odit ex
            voluptatibus cupiditate, nisi quis porro qui optio dolorem atque
            reiciendis soluta accusantium tempore earum molestiae? Nam, pariatur
            quaerat porro eos temporibus ratione cumque blanditiis commodi
            obcaecati nisi earum magni labore at, aliquid nihil nobis debitis
            quisquam, dicta exercitationem quasi sint quas?
          </p>
        </div>
      </main>
    </div>
  );
}
